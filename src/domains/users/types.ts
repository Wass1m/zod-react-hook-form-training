// ðŸ§ª EXERCICE ZOD â€“ CrÃ©ation dâ€™un schÃ©ma de validation utilisateur

// Objectif : crÃ©er un schÃ©ma Zod `UserSchema` avec champs obligatoires, validations conditionnelles,
// et messages dâ€™erreurs personnalisÃ©s en franÃ§ais.

// ðŸ“¦ PrÃ©requis : assurez-vous que Zod est installÃ© dans le projet
// npm install zod

// âœ… TODO - Ã‰tapes Ã  suivre :

// ðŸŸ  Ã‰tape 1 â€“ PrÃ©paration
// - CrÃ©er un fichier userSchema.ts
// - Importer `z` depuis "zod"
import { z } from "zod";

// âœ… ZOD - refine()
// -------------------------------------------------
// âž¤ refine permet dâ€™ajouter une rÃ¨gle personnalisÃ©e sur un champ **individuel**.
// Elle est appelÃ©e avec la valeur du champ et doit retourner true/false.
// Elle prend aussi un message Ã  afficher en cas dâ€™Ã©chec.
//
// Exemples dâ€™usage :
// - EmpÃªcher les valeurs nulles mÃªme si le champ est nullable
// - Valider un champ avec une expression rÃ©guliÃ¨re
//
// Syntaxe :
// z.string().nullable().refine((val) => val !== null, { message: "Ce champ est obligatoire" })

// âœ… ZOD - superRefine()
// -------------------------------------------------
// âž¤ superRefine permet de faire des validations **multi-champs** ou **conditionnelles**
// sur lâ€™objet entier. On peut utiliser ctx.addIssue pour ajouter une ou plusieurs erreurs.
//
// Exemples dâ€™usage :
// - Comparer deux champs (ex : password === passwordCopy)
// - Valider un champ uniquement si un autre champ a une certaine valeur

// Syntaxe :
// .superRefine((data, ctx) => {
// if (data.condition && !data.otherField) {
// ctx.addIssue({ path: ['otherField'], message: "Erreur", code: z.ZodIssueCode.custom })
// }
// })

// ðŸŸ¡ Ã‰tape 2 â€“ Champs de base
// - DÃ©finir un objet Zod avec :
// - id : string nullable
// - firstName : string, min 3 caractÃ¨res, obligatoire (non null)
// - lastName : string, min 3 caractÃ¨res, obligatoire (non null)
// - fullName : string nullable
// - email : string, email valide, obligatoire (non null)

export const UserSchema = z
  .object({
    id: z.string().nullish(), // valeur ,undefined (etre ommis), null

    // firstName : minimum 3 caractÃ¨res, non null, avec refine pour vÃ©rifier non null
    firstName: z
      .string()
      .min(3, "Minimum 3 caractÃ¨res")
      .refine((val) => val !== null, {
        message: "Ce champ est obligatoire",
      }),

    // lastName : minimum 3 caractÃ¨res, non null Ã  valider dans le string object
    lastName: z
      .string({
        required_error: "Ce champ est obligatoire",
      })
      .min(3, "Minimum 3 caractÃ¨res"),

    // fullName : string nullable
    fullName: z.string().nullable(),

    // email : format email valide, non null
    email: z
      .string()
      .email("Adresse email invalide")

      .refine((val) => val !== null, {
        message: "Ce champ est obligatoire",
      }),

    // ðŸŸ¢ Ã‰tape 3 â€“ Champs liÃ©s au mot de passe
    // - isPasswordEditable : boolÃ©en optionnel
    // - password : string nullable
    // - passwordCopy : string nullable
    isPasswordEditable: z.boolean().optional(),
    password: z.string().nullable(),
    passwordCopy: z.string().nullable(),
  })

  // ðŸ”µ Ã‰tape 4 â€“ Validation conditionnelle avec superRefine
  // - Si isPasswordEditable est true :
  //   - password est requis
  //   - password doit faire minimum 3 caractÃ¨res
  //   - password doit Ãªtre Ã©gal Ã  passwordCopy
  .superRefine((val, ctx) => {
    if (val.isPasswordEditable) {
      if (!val.password) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: "Ce champ est obligatoire",
          path: ["password"],
        });
      } else if (val.password.length < 3) {
        ctx.addIssue({
          code: z.ZodIssueCode.too_small,
          minimum: 3,
          type: "string",
          inclusive: true,
          message: "Minimum 3 caractÃ¨res",
          path: ["password"],
        });
      }
      if (val.password !== val.passwordCopy) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: "Les mots de passe ne sont pas identiques",
          path: ["passwordCopy"],
        });
      }
    }
  });

// ðŸŸ£ Ã‰tape 5 â€“ Export des types
// - Exporter le type User depuis le schÃ©ma
// - DÃ©finir un type AuthUser qui hÃ©rite de User avec une propriÃ©tÃ© defaultCultureKey facultative

export type User = z.infer<typeof UserSchema>;

export type AuthUser = User & {
  defaultCultureKey?: "fr";
};
